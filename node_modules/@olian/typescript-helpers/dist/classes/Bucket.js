"use strict";
// Inspired by: https://stackoverflow.com/a/60962966/6224823
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Bucket = void 0;
/**
 * A bucket is used to convert any asynchronously occurring event into an async generator.
 *
 * ```ts
 * const bucket = new Bucket<number>();
 *
 * setInterval(() => {
 *   bucket.push(Date.now());
 * }, 1000);
 *
 * for await (const timeStamp of bucket) {
 *   console.log(timeStamp);
 * }
 * ```
 */
class Bucket {
    constructor() {
        this.stack = [];
        this.nextValue = null;
        const self = this;
        function bucket() {
            return __asyncGenerator(this, arguments, function* bucket_1() {
                while (true) {
                    yield yield __await(new Promise((resolve) => {
                        if (self.stack.length > 0) {
                            return resolve(self.stack.shift());
                        }
                        self.nextValue = resolve;
                    }));
                }
            });
        }
        this.iterator = bucket();
    }
    push(value) {
        if (this.nextValue) {
            this.nextValue(value);
            this.nextValue = null;
            return;
        }
        this.stack.push(value);
    }
    [Symbol.iterator]() {
        // Typescript freaks out if this isn't here....
        // Even though Symbol.asyncIterator is present
        // and even though Symbol.iterator returns an async iterator
        return this;
    }
    [Symbol.asyncIterator]() {
        return this;
    }
    next() {
        return this.iterator.next();
    }
    return(value) {
        return this.iterator.return(value);
    }
    throw(e) {
        return this.iterator.throw(e);
    }
}
exports.Bucket = Bucket;

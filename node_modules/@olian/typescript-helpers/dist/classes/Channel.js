"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    function adopt(value) { return value instanceof P ? value : new P(function (resolve) { resolve(value); }); }
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : adopt(result.value).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __asyncValues = (this && this.__asyncValues) || function (o) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var m = o[Symbol.asyncIterator], i;
    return m ? m.call(o) : (o = typeof __values === "function" ? __values(o) : o[Symbol.iterator](), i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i);
    function verb(n) { i[n] = o[n] && function (v) { return new Promise(function (resolve, reject) { v = o[n](v), settle(resolve, reject, v.done, v.value); }); }; }
    function settle(resolve, reject, d, v) { Promise.resolve(v).then(function(v) { resolve({ value: v, done: d }); }, reject); }
};
var __await = (this && this.__await) || function (v) { return this instanceof __await ? (this.v = v, this) : new __await(v); }
var __asyncGenerator = (this && this.__asyncGenerator) || function (thisArg, _arguments, generator) {
    if (!Symbol.asyncIterator) throw new TypeError("Symbol.asyncIterator is not defined.");
    var g = generator.apply(thisArg, _arguments || []), i, q = [];
    return i = {}, verb("next"), verb("throw"), verb("return"), i[Symbol.asyncIterator] = function () { return this; }, i;
    function verb(n) { if (g[n]) i[n] = function (v) { return new Promise(function (a, b) { q.push([n, v, a, b]) > 1 || resume(n, v); }); }; }
    function resume(n, v) { try { step(g[n](v)); } catch (e) { settle(q[0][3], e); } }
    function step(r) { r.value instanceof __await ? Promise.resolve(r.value.v).then(fulfill, reject) : settle(q[0][2], r); }
    function fulfill(value) { resume("next", value); }
    function reject(value) { resume("throw", value); }
    function settle(f, v) { if (f(v), q.shift(), q.length) resume(q[0][0], q[0][1]); }
};
Object.defineProperty(exports, "__esModule", { value: true });
exports.Channel = void 0;
const Bucket_1 = require("./Bucket");
/**
 * A Channel allows for message passing between two or more asynchronous function with the option of being notified when a sent message is received.
 *
 * ```ts
 * const channel = new Channel<number>();
 *
 * const sender = async (i = 0): Promise<void> => {
 *   await channel.send(i);
 *   return sender(i + 1);
 * }
 *
 * sender();
 * await channel.receive(); // 0
 * await channel.receive(); // 1
 * await channel.receive(); // 2
 * await channel.receive(); // 3
 * ```
 */
class Channel {
    constructor() {
        this.awaitReceiveMap = new WeakMap();
        this.bucket = new Bucket_1.Bucket();
    }
    send(value) {
        return __awaiter(this, void 0, void 0, function* () {
            const wrapper = { value };
            const receivePromise = new Promise((resolve) => {
                this.awaitReceiveMap.set(wrapper, () => resolve());
            });
            this.bucket.push(wrapper);
            return receivePromise;
        });
    }
    receive() {
        return __awaiter(this, void 0, void 0, function* () {
            const { value: wrapper } = yield this.bucket.next();
            const receiveCallback = this.awaitReceiveMap.get(wrapper);
            if (receiveCallback) {
                receiveCallback();
                this.awaitReceiveMap.delete(wrapper);
            }
            return wrapper.value;
        });
    }
    get generator() {
        return this.getGenerator();
    }
    getGenerator() {
        return __asyncGenerator(this, arguments, function* getGenerator_1() {
            var e_1, _a;
            try {
                for (var _b = __asyncValues(this.bucket), _c; _c = yield __await(_b.next()), !_c.done;) {
                    const wrapper = _c.value;
                    const receiveCallback = this.awaitReceiveMap.get(wrapper);
                    if (receiveCallback) {
                        receiveCallback();
                        this.awaitReceiveMap.delete(wrapper);
                    }
                    yield yield __await(wrapper.value);
                }
            }
            catch (e_1_1) { e_1 = { error: e_1_1 }; }
            finally {
                try {
                    if (_c && !_c.done && (_a = _b.return)) yield __await(_a.call(_b));
                }
                finally { if (e_1) throw e_1.error; }
            }
        });
    }
}
exports.Channel = Channel;

interface IBucket<T> extends AsyncGenerator<T, never, unknown> {
    push(v: T): void;
}
/**
 * A bucket is used to convert any asynchronously occurring event into an async generator.
 *
 * ```ts
 * const bucket = new Bucket<number>();
 *
 * setInterval(() => {
 *   bucket.push(Date.now());
 * }, 1000);
 *
 * for await (const timeStamp of bucket) {
 *   console.log(timeStamp);
 * }
 * ```
 */
export declare class Bucket<T> implements IBucket<T> {
    private stack;
    private nextValue;
    private iterator;
    constructor();
    push(value: T): void;
    [Symbol.iterator](): this;
    [Symbol.asyncIterator](): this;
    next(): Promise<IteratorResult<T, never>>;
    return(value: PromiseLike<never>): Promise<IteratorResult<T, never>>;
    throw(e: any): Promise<IteratorResult<T, never>>;
}
export {};
